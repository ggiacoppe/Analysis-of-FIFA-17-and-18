#Comparative analysis between FIFA 2017 and FIFA 2018 datasets

import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import numpy as np
#Checking which columns are common 
display(fifa_2017)
display(fifa_2018)
a = np.intersect1d(fifa_2017.columns, fifa_2018.columns)
print(a)

fifa_2018_playerstats = fifa_2018[['Overall', 'Potential',
       'Acceleration', 'Aggression', 'Agility', 'Balance', 'Ball control',
       'Composure', 'Crossing', 'Curve', 'Dribbling', 'Finishing',
        'GK diving', 'GK handling', 'GK kicking',
       'GK positioning', 'GK reflexes', 'Heading accuracy', 'Interceptions',
       'Jumping', 'Long passing', 'Long shots', 'Marking',
       'Positioning', 'Reactions', 'Short passing', 'Shot power',
       'Sliding tackle', 'Sprint speed', 'Stamina', 'Standing tackle',
       'Strength', 'Vision', 'Volleys']]

# Features classified as Offensive Defensive or Neutral
off_def_neutral=[['neutral','neutral','neutral',
'neutral','neutral','neutral','neutral','neutral','offese','offense','neutral','offense',
'defense','defence','defense','defense','defense','neutral','defense','neutral','neutral',
'neutral''defense','neutral','neutral','neutral','offense','defense','neutral','neutral',
'defense','neutral','neutral','offense']]

teams=fifa_2018_subset.groupby(['Club']).mean()
teams['Sum_of_row'] = teams.sum(axis=1)
meanofsum = teams.groupby('Club')['Sum_of_row'].mean()
meanofsum
mean = teams.mean()
#Correlations to indentify the two features that are strongly correlated
B = teams - mean
corr=B.corr()
corr['Overall'].nlargest(2)
B.plot.scatter(x = 'Reactions', y = 'Overall')

#Eigenvalues and percent variation
C = (1/646)*np.dot(B.T, B)
eig = np.linalg.eig(C)
def percent_variation(n,eig):
    """Takes in the output of np.linalg.eig as eig and returns percent variation of first n components"""
    return sum(eig[0][:n])/sum(eig[0])

#Principle Component Analysis
pca = PCA(n_components=2)
pca.fit(teams)
pca.explained_variance_ratio_
teams_pca = pca.transform(teams)
teams_pca_df = pd.DataFrame(data = teams_pca, columns = ['PC1', 'PC2'])
teams_pca
teams_pca_df.plot.scatter(x = 'PC1', y = 'PC2')

#Calculating Offense and Defense score to make the data 2-D:
off_score=Mean(Mean_of_sum(off attributes)+Mean_of_sum(neutral attributes))/total # players in a team
def_score=Mean(Mean_of_sum(def attributes)+Mean_of_sum(neutral attributes))/total # players in a team

teams['off_Sum_of_row'] = teams['Crossing']+teams['Curve']+teams['Finishing']+teams['Shot power']+ teams['Volleys']+ teams['Overall']+teams['Potential']+teams['Acceleration']+teams['Agility']+teams['Balance']+teams['Ball control']
off_meanofsum = teams.groupby('Club')['off_Sum_of_row'].mean()
#print(off_meanofsum)
offensive_score=off_meanofsum/no_of_players
offensive_score

teams['def_Sum_of_row'] = teams['GK diving']+teams['GK handling']+teams['GK kicking']+teams['GK positioning']+ teams['GK reflexes']+ +teams['Interceptions']+teams['Marking']+teams['Sliding tackle']+teams['Standing tackle']+teams['Overall']+teams['Potential']+teams['Acceleration']+teams['Agility']+teams['Balance']+teams['Ball control']
def_meanofsum = teams.groupby('Club')['def_Sum_of_row'].mean()
#print(def_meanofsum)
defensive_score=def_meanofsum/no_of_players
defensive_score
